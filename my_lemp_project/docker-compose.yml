version: '3.3'

services:
  # Nginx 웹 서버 서비스
  nginx:
    image: nginx:stable-alpine
    container_name: my_nginx
    ports:
      - "80:80"
      - "443:443" # HTTPS 포트 추가
    volumes:
      - ../:/app # S_WEB_Project 전체를 /app에 마운트
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl # SSL 인증서 및 키 마운트
      - uploads_data:/app/my_lemp_project/src/uploads
    command: >
      sh -c "
        apk add --no-cache openssl &&
        mkdir -p /etc/nginx/ssl &&
        if [ ! -f /etc/nginx/ssl/nginx.crt ] || [ ! -f /etc/nginx/ssl/nginx.key ] || ! openssl x509 -in /etc/nginx/ssl/nginx.crt -noout 2>/dev/null || ! openssl rsa -in /etc/nginx/ssl/nginx.key -check -noout 2>/dev/null; then
          echo 'Generating new SSL certificate...' &&
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt -subj '/C=KR/ST=Seoul/L=Seoul/O=Development/OU=IT/CN=localhost' 2>/dev/null &&
          chmod 600 /etc/nginx/ssl/nginx.key &&
          chmod 644 /etc/nginx/ssl/nginx.crt &&
          echo 'SSL certificate generated successfully'
        else
          CERT_MODULUS=$$(openssl x509 -noout -modulus -in /etc/nginx/ssl/nginx.crt 2>/dev/null | openssl md5) &&
          KEY_MODULUS=$$(openssl rsa -noout -modulus -in /etc/nginx/ssl/nginx.key 2>/dev/null | openssl md5) &&
          if [ \"$$CERT_MODULUS\" != \"$$KEY_MODULUS\" ]; then
            echo 'SSL certificate and key mismatch. Regenerating...' &&
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt -subj '/C=KR/ST=Seoul/L=Seoul/O=Development/OU=IT/CN=localhost' 2>/dev/null &&
            chmod 600 /etc/nginx/ssl/nginx.key &&
            chmod 644 /etc/nginx/ssl/nginx.crt &&
            echo 'SSL certificate regenerated successfully'
          else
            echo 'SSL certificate is valid'
          fi
        fi &&
        nginx -g 'daemon off;'
      "
    depends_on:
      - php

  # PHP-FPM 서비스
  php:
    build:
      context: .
      dockerfile: php.Dockerfile
    container_name: my_php
    environment:
      MYSQL_DATABASE: 'my_database'
      MYSQL_USER: 'my_user'
      MYSQL_PASSWORD: 'my_password'
    volumes:
      - ./src:/var/www/html
      - uploads_data:/var/www/html/uploads # 명시적 볼륨 사용
    depends_on:
      - db

  # MariaDB 데이터베이스 서비스
  db:
    image: mariadb:10.6
    container_name: my_db
    restart: always
    environment:
      MYSQL_DATABASE: 'my_database'      # 생성할 데이터베이스 이름
      MYSQL_USER: 'my_user'              # 데이터베이스 사용자
      MYSQL_PASSWORD: 'my_password'      # 사용자 비밀번호
      MYSQL_ROOT_PASSWORD: 'my_root_password' # root 계정 비밀번호
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

volumes:
  db_data: # 데이터베이스 데이터를 영구적으로 저장하기 위한 볼륨
  uploads_data: # 업로드 파일을 위한 볼륨 추가
