<?php
require_once 'TestPage.php';

// 1. 페이지 설정
$page_title = 'CVE Exploit';
$description = '<p><strong>CVE (Common Vulnerabilities and Exposures)</strong>는 공개적으로 알려진 정보 보안 취약점에 고유하게 부여되는 식별자입니다. 이 페이지는 특정 CVE의 개념을 이해하고 테스트하기 위한 시뮬레이션 환경을 제공합니다.</p>
<p><strong>참고:</strong> 이 페이지는 현재 플레이스홀더이며, 특정 CVE를 구현하여 테스트할 수 있습니다.</p>';

// 2. 페이로드 정의 (시나리오 설명)
$payloads = [
    'scenario' => [
        'title' => '🧪 익스플로잇 시뮬레이션',
        'description' => '아래 버튼을 클릭하여 가상의 CVE 익스플로잇을 시뮬레이션합니다.',
        'payloads' => [] // 페이로드 버튼은 없음
    ]
];

// 3. 방어 방법 정의
$defense_methods = [
    "<strong>소프트웨어 최신화:</strong> 모든 소프트웨어, 라이브러리, 프레임워크를 항상 최신 버전으로 유지하고 보안 패치를 적용합니다.",
    "<strong>취약점 스캐닝:</strong> 정기적으로 애플리케이션 및 시스템에 대한 취약점 스캐닝을 수행합니다.",
    "<strong>보안 설정 강화:</strong> 불필요한 서비스 비활성화, 최소 권한 원칙 적용 등 보안 설정을 강화합니다.",
    "<strong>입력 값 검증:</strong> 모든 사용자 입력을 철저히 검증하고 필터링합니다.",
    "<strong>보안 모니터링:</strong> 침입 탐지 시스템(IDS), 침입 방지 시스템(IPS), 웹 애플리케이션 방화벽(WAF) 등을 활용하여 비정상적인 활동을 모니터링하고 차단합니다."
];

// 4. 참고 자료 정의
$references = [
    "MITRE CVE" => "https://cve.mitre.org/",
    "National Vulnerability Database (NVD)" => "https://nvd.nist.gov/"
];

// 5. 테스트 폼 UI 정의
$cve_id = 'CVE-YYYY-XXXX'; // 시뮬레이션할 CVE ID
$description_cve = '이 CVE는 특정 소프트웨어/라이브러리의 취약점을 악용합니다.';
$payload_example = '예: 특정 HTTP 요청, 조작된 입력 값';

$test_form_ui = <<<HTML
<div class="info-box" style="background: #d1ecf1; border-color: #bee5eb; color: #0c5460;">
    <p><strong>시뮬레이션 CVE:</strong> <code>{$cve_id}</code></p>
    <p><strong>설명:</strong> <code>{$description_cve}</code></p>
    <p><strong>페이로드 예시:</strong> <code>{$payload_example}</code></p>
</div>

<form method="post" class="test-form">
    <h3>🧪 익스플로잇 시뮬레이션</h3>
    <p>아래 버튼을 클릭하여 가상의 CVE 익스플로잇을 시뮬레이션합니다.</p>
    <button type="submit" name="action" value="simulate_exploit" class="btn" style="background: #dc3545;">익스플로잇 시뮬레이션 실행</button>
</form>
HTML;

// 6. 테스트 로직 콜백 정의
$test_logic_callback = function($form_data) use ($cve_id) {
    $result = '';
    $error = '';
    $action = $form_data['action'] ?? '';

    if ($action === 'simulate_exploit') {
        $result = "{$cve_id} 익스플로잇 시뮬레이션이 실행되었습니다. (현재는 플레이스홀더)";
        $result .= "<br>실제 익스플로잇 로직을 구현하여 테스트할 수 있습니다.";
    } else {
        $error = "알 수 없는 요청입니다.";
    }

    return ['result' => $result, 'error' => $error];
};

// 7. TestPage 인스턴스 생성 및 실행
$test_page = new TestPage($page_title, $description, $payloads, $defense_methods, $references);
$test_page->set_test_form($test_form_ui);
$test_page->set_test_logic($test_logic_callback);
$test_page->run();