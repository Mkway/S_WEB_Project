#!/bin/bash

# ==============================================
# S_WEB_Project 취약점 개발 워크플로우 스크립트
# ==============================================

set -e  # 오류 발생시 스크립트 종료

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# 프로젝트 루트 디렉토리
PROJECT_ROOT="/home/wsl/S_WEB_Project"
WEBSEC_LAB_DIR="$PROJECT_ROOT/websec-lab/src/webhacking"

# 로그 파일
LOG_FILE="$PROJECT_ROOT/log/dev_workflow_$(date +%Y_%m_%d).log"

# 로깅 함수
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# 진행 상황 표시 함수
show_progress() {
    echo -e "${BLUE}🔄 $1${NC}"
    log "PROGRESS: $1"
}

# 성공 메시지 함수
show_success() {
    echo -e "${GREEN}✅ $1${NC}"
    log "SUCCESS: $1"
}

# 경고 메시지 함수
show_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
    log "WARNING: $1"
}

# 오류 메시지 함수
show_error() {
    echo -e "${RED}❌ $1${NC}"
    log "ERROR: $1"
}

# 취약점 목록 정의
declare -A VULNERABILITIES=(
    ["xxe"]="XXE (XML External Entity)"
    ["ssrf"]="SSRF (Server-Side Request Forgery)"
    ["ssti"]="SSTI (Server-Side Template Injection)"
    ["open_redirect"]="Open Redirect"
    ["xpath"]="XPath Injection"
)

# 메인 함수
main() {
    echo -e "${PURPLE}"
    echo "=================================================="
    echo "🚀 S_WEB_Project 취약점 개발 워크플로우"
    echo "=================================================="
    echo -e "${NC}"
    
    # 로그 디렉토리 생성
    mkdir -p "$(dirname "$LOG_FILE")"
    log "워크플로우 시작"
    
    # 작업 디렉토리 확인
    if [[ ! -d "$WEBSEC_LAB_DIR" ]]; then
        show_error "웹보안 랩 디렉토리를 찾을 수 없습니다: $WEBSEC_LAB_DIR"
        exit 1
    fi
    
    # Git 상태 확인
    cd "$PROJECT_ROOT"
    if ! git status &>/dev/null; then
        show_error "Git 저장소가 아닙니다."
        exit 1
    fi
    
    # 취약점 선택
    select_vulnerability
}

# 취약점 선택 함수
select_vulnerability() {
    echo -e "${BLUE}다음 중 작업할 취약점을 선택하세요:${NC}"
    echo ""
    
    local i=1
    local vuln_keys=()
    
    for vuln_key in "${!VULNERABILITIES[@]}"; do
        vuln_keys+=("$vuln_key")
        echo "  $i) ${VULNERABILITIES[$vuln_key]}"
        ((i++))
    done
    
    echo ""
    read -p "선택 (1-${#VULNERABILITIES[@]}): " choice
    
    if [[ "$choice" -ge 1 && "$choice" -le ${#VULNERABILITIES[@]} ]]; then
        local selected_vuln="${vuln_keys[$((choice-1))]}"
        show_success "선택된 취약점: ${VULNERABILITIES[$selected_vuln]}"
        start_development_workflow "$selected_vuln"
    else
        show_error "잘못된 선택입니다."
        exit 1
    fi
}

# 개발 워크플로우 시작 함수
start_development_workflow() {
    local vuln_type="$1"
    local vuln_name="${VULNERABILITIES[$vuln_type]}"
    
    show_progress "[$vuln_name] 개발 워크플로우 시작"
    
    # Phase 1: 분석 단계
    analyze_current_state "$vuln_type"
    
    # Phase 2: 구현 준비
    prepare_implementation "$vuln_type"
    
    # Phase 3: 품질 체크리스트 표시
    show_quality_checklist "$vuln_type"
    
    # Phase 4: 개발 환경 준비
    prepare_dev_environment
    
    show_success "[$vuln_name] 개발 워크플로우 준비 완료!"
    echo ""
    echo -e "${YELLOW}다음 단계:${NC}"
    echo "1. Claude Code를 통해 실제 구현 시작"
    echo "2. 각 단계마다 품질 체크리스트 확인"
    echo "3. 구현 완료 후 ./scripts/vulnerability_test.sh로 테스트"
    echo "4. ./scripts/vulnerability_commit.sh로 자동 커밋"
}

# 현재 상태 분석 함수
analyze_current_state() {
    local vuln_type="$1"
    
    show_progress "[$vuln_type] 현재 상태 분석 중..."
    
    local test_file="$WEBSEC_LAB_DIR/${vuln_type}_test.php"
    
    if [[ -f "$test_file" ]]; then
        show_success "테스트 파일 존재: $test_file"
        
        # 실제 실행 여부 확인 (간단한 패턴 매칭)
        if grep -q "시뮬레이션\|simulation" "$test_file"; then
            show_warning "현재 시뮬레이션 모드로 추정됩니다."
            log "ANALYSIS: $vuln_type - 시뮬레이션 모드에서 실제 실행 모드로 업그레이드 필요"
        else
            show_success "실제 실행 모드로 추정됩니다."
            log "ANALYSIS: $vuln_type - 이미 실제 실행 모드"
        fi
        
        # 파일 크기 확인
        local file_size=$(wc -l < "$test_file")
        log "ANALYSIS: $vuln_type - 파일 라인 수: $file_size"
        
    else
        show_warning "테스트 파일이 존재하지 않습니다: $test_file"
        log "ANALYSIS: $vuln_type - 테스트 파일 미존재, 새로 생성 필요"
    fi
}

# 구현 준비 함수
prepare_implementation() {
    local vuln_type="$1"
    
    show_progress "[$vuln_type] 구현 환경 준비 중..."
    
    # 백업 디렉토리 생성
    local backup_dir="$PROJECT_ROOT/backup/$(date +%Y%m%d_%H%M%S)_${vuln_type}"
    mkdir -p "$backup_dir"
    
    local test_file="$WEBSEC_LAB_DIR/${vuln_type}_test.php"
    
    if [[ -f "$test_file" ]]; then
        cp "$test_file" "$backup_dir/"
        show_success "원본 파일 백업 완료: $backup_dir"
    fi
    
    log "BACKUP: $vuln_type 파일 백업 완료 - $backup_dir"
}

# 품질 체크리스트 표시 함수
show_quality_checklist() {
    local vuln_type="$1"
    
    echo ""
    echo -e "${PURPLE}📋 [$vuln_type] 개발 품질 체크리스트${NC}"
    echo "=================================================="
    echo ""
    echo -e "${BLUE}🎯 구현 요구사항:${NC}"
    echo "  □ 실제 취약점 실행 (시뮬레이션 ❌)"
    echo "  □ 취약한 vs 안전한 구현 비교"
    echo "  □ 컬러 코딩된 결과 표시"
    echo "  □ 보안 권장사항 섹션 포함"
    echo ""
    echo -e "${BLUE}🔒 보안 고려사항:${NC}"
    echo "  □ 교육 목적임을 명시"
    echo "  □ 실제 시스템 피해 방지 조치"
    echo "  □ 적절한 에러 핸들링"
    echo ""
    echo -e "${BLUE}📝 코드 품질:${NC}"
    echo "  □ PHP 표준 코딩 스타일 준수"
    echo "  □ 적절한 주석 추가"
    echo "  □ 입력 값 검증"
    echo ""
    echo -e "${BLUE}🧪 테스트 요구사항:${NC}"
    echo "  □ 로컬 환경에서 실행 테스트"
    echo "  □ 다양한 페이로드 테스트"
    echo "  □ 에러 상황 처리 확인"
    echo ""
    echo -e "${BLUE}📚 문서화:${NC}"
    echo "  □ 상세한 커밋 메시지"
    echo "  □ 보안 분석 문서 업데이트"
    echo "  □ 구현 내용 로그 기록"
}

# 개발 환경 준비 함수
prepare_dev_environment() {
    show_progress "개발 환경 점검 중..."
    
    # PHP 문법 체크 (만약 설치되어 있다면)
    if command -v php &> /dev/null; then
        show_success "PHP 사용 가능"
    else
        show_warning "PHP가 설치되어 있지 않습니다."
    fi
    
    # Git 상태 확인
    if git diff --quiet; then
        show_success "Git 작업 디렉토리 clean"
    else
        show_warning "커밋되지 않은 변경사항이 있습니다."
        git status --short
    fi
    
    log "DEV_ENV: 개발 환경 준비 완료"
}

# 스크립트 실행
main "$@"