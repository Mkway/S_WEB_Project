#!/bin/bash

# ==============================================
# S_WEB_Project 취약점 자동 커밋 스크립트
# ==============================================

set -e

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# 프로젝트 설정
PROJECT_ROOT="/home/wsl/S_WEB_Project"
COMMIT_LOG="$PROJECT_ROOT/log/commit_history_$(date +%Y%m%d).log"

# 취약점 타입별 한글 이름 매핑
declare -A VULN_KOREAN_NAMES=(
    ["xxe"]="XXE 외부 엔티티 공격"
    ["ssrf"]="SSRF 서버 측 요청 위조"
    ["ssti"]="SSTI 서버 측 템플릿 인젝션"
    ["open_redirect"]="오픈 리다이렉트"
    ["xpath"]="XPath 인젝션"
    ["sql_injection"]="SQL 인젝션"
    ["xss"]="XSS 크로스 사이트 스크립팅"
    ["command_injection"]="명령어 인젝션"
    ["file_upload"]="파일 업로드"
    ["csrf"]="CSRF 크로스 사이트 요청 위조"
    ["file_inclusion"]="파일 인클루전"
    ["directory_traversal"]="디렉토리 트래버설"
    ["auth_bypass"]="인증 우회"
)

# 로깅 함수
log_commit() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$COMMIT_LOG"
}

# 메시지 출력 함수들
show_commit_progress() {
    echo -e "${BLUE}📦 $1${NC}"
    log_commit "COMMIT_PROGRESS: $1"
}

show_commit_success() {
    echo -e "${GREEN}✅ $1${NC}"
    log_commit "COMMIT_SUCCESS: $1"
}

show_commit_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
    log_commit "COMMIT_WARNING: $1"
}

show_commit_error() {
    echo -e "${RED}❌ $1${NC}"
    log_commit "COMMIT_ERROR: $1"
}

# 메인 함수
main() {
    echo -e "${PURPLE}"
    echo "=================================================="
    echo "📦 S_WEB_Project 자동 커밋 시스템"
    echo "=================================================="
    echo -e "${NC}"
    
    # 로그 디렉토리 생성
    mkdir -p "$(dirname "$COMMIT_LOG")"
    log_commit "자동 커밋 프로세스 시작"
    
    # Git 저장소 확인
    cd "$PROJECT_ROOT"
    if ! git status &>/dev/null; then
        show_commit_error "Git 저장소가 아닙니다."
        exit 1
    fi
    
    # 인자 확인
    if [[ $# -eq 0 ]]; then
        interactive_commit
    else
        automatic_commit "$1"
    fi
}

# 대화형 커밋 프로세스
interactive_commit() {
    show_commit_progress "대화형 커밋 모드 시작"
    
    # Git 상태 확인
    show_commit_progress "Git 상태 확인 중..."
    git status
    
    if git diff --quiet && git diff --cached --quiet; then
        show_commit_warning "커밋할 변경사항이 없습니다."
        return 0
    fi
    
    echo ""
    echo -e "${BLUE}어떤 유형의 커밋을 하시겠습니까?${NC}"
    echo "1) 취약점 기능 개발/수정"
    echo "2) 버그 수정"
    echo "3) 리팩토링"
    echo "4) 문서 업데이트"
    echo "5) 테스트 추가/수정"
    echo "6) 기타 변경사항"
    echo ""
    
    read -p "선택 (1-6): " commit_type
    
    case $commit_type in
        1) handle_vulnerability_commit ;;
        2) handle_bugfix_commit ;;
        3) handle_refactor_commit ;;
        4) handle_docs_commit ;;
        5) handle_test_commit ;;
        6) handle_other_commit ;;
        *) show_commit_error "잘못된 선택입니다."; exit 1 ;;
    esac
}

# 취약점 기능 커밋 처리
handle_vulnerability_commit() {
    show_commit_progress "취약점 기능 커밋 처리 중..."
    
    # 변경된 취약점 파일 감지
    local changed_vulns=()
    
    for vuln_file in $(git diff --name-only --cached | grep "_test\.php$"); do
        local vuln_name=$(basename "$vuln_file" "_test.php")
        changed_vulns+=("$vuln_name")
    done
    
    if [[ ${#changed_vulns[@]} -eq 0 ]]; then
        # 스테이징되지 않은 파일도 확인
        for vuln_file in $(git diff --name-only | grep "_test\.php$"); do
            local vuln_name=$(basename "$vuln_file" "_test.php")
            changed_vulns+=("$vuln_name")
        done
    fi
    
    if [[ ${#changed_vulns[@]} -eq 0 ]]; then
        show_commit_warning "취약점 테스트 파일 변경사항을 찾을 수 없습니다."
        echo "일반 기능 커밋으로 진행합니다."
        handle_other_commit
        return
    fi
    
    # 주 취약점 선택 (첫 번째 것)
    local main_vuln="${changed_vulns[0]}"
    local korean_name="${VULN_KOREAN_NAMES[$main_vuln]:-$main_vuln}"
    
    echo ""
    echo -e "${BLUE}감지된 취약점: $korean_name${NC}"
    echo ""
    
    # 커밋 메시지 생성
    generate_vulnerability_commit_message "$main_vuln" "$korean_name"
}

# 취약점 커밋 메시지 생성
generate_vulnerability_commit_message() {
    local vuln_type="$1"
    local korean_name="$2"
    
    show_commit_progress "[$vuln_type] 커밋 메시지 생성 중..."
    
    # 변경사항 분석
    local changes=()
    local commit_title=""
    
    # Git diff로 변경사항 분석
    if git diff --cached --quiet; then
        # 스테이징된 변경사항이 없으면 모든 변경사항 스테이징
        git add .
    fi
    
    local diff_output=$(git diff --cached)
    
    # 변경사항 패턴 분석
    if echo "$diff_output" | grep -q "실제.*실행\|real.*execution"; then
        commit_title="feat: $korean_name 실제 실행 구현"
        changes+=("시뮬레이션에서 실제 공격 실행으로 업그레이드")
    elif echo "$diff_output" | grep -q "시뮬레이션\|simulation"; then
        commit_title="feat: $korean_name 시뮬레이션 기능 개선"
        changes+=("시뮬레이션 기능 향상 및 사용자 경험 개선")
    else
        commit_title="feat: $korean_name 기능 개선"
        changes+=("취약점 테스트 기능 개선")
    fi
    
    # 추가 변경사항 감지
    if echo "$diff_output" | grep -q "vulnerable.*output\|safe.*comparison"; then
        changes+=("취약한 vs 안전한 구현 비교 기능 추가")
    fi
    
    if echo "$diff_output" | grep -q "color\|class.*red\|class.*green"; then
        changes+=("컬러 코딩된 결과 표시 기능 구현")
    fi
    
    if echo "$diff_output" | grep -q "defense\|보안.*권고\|방어.*방법"; then
        changes+=("보안 권장사항 및 방어 방법 상세화")
    fi
    
    if echo "$diff_output" | grep -q "payload"; then
        changes+=("다양한 공격 페이로드 추가 및 개선")
    fi
    
    # 기본 변경사항 추가 (변경사항이 감지되지 않은 경우)
    if [[ ${#changes[@]} -eq 1 ]]; then
        changes+=("사용자 인터페이스 및 경험 개선")
        changes+=("코드 품질 및 안정성 향상")
    fi
    
    # 커밋 메시지 구성
    local commit_message="$commit_title

"
    
    for change in "${changes[@]}"; do
        commit_message+="- $change
"
    done
    
    commit_message+="
🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
    
    # 커밋 실행
    execute_commit "$commit_message" "$vuln_type"
}

# 기타 커밋 유형들 (간단한 구현)
handle_bugfix_commit() {
    read -p "버그 수정 내용을 간단히 설명해주세요: " bug_description
    local commit_msg="fix: $bug_description

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
    
    git add .
    execute_commit "$commit_msg" "bugfix"
}

handle_refactor_commit() {
    read -p "리팩토링 내용을 간단히 설명해주세요: " refactor_description
    local commit_msg="refactor: $refactor_description

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
    
    git add .
    execute_commit "$commit_msg" "refactor"
}

handle_docs_commit() {
    local commit_msg="docs: 문서 업데이트 및 개선

- 프로젝트 문서 내용 보강
- 사용법 및 가이드 개선

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
    
    git add .
    execute_commit "$commit_msg" "docs"
}

handle_test_commit() {
    local commit_msg="test: 테스트 코드 추가 및 개선

- 테스트 커버리지 향상
- 테스트 안정성 개선

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
    
    git add .
    execute_commit "$commit_msg" "test"
}

handle_other_commit() {
    read -p "변경사항을 간단히 설명해주세요: " change_description
    local commit_msg="chore: $change_description

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
    
    git add .
    execute_commit "$commit_msg" "other"
}

# 자동 커밋 (인자로 취약점 타입 받음)
automatic_commit() {
    local vuln_type="$1"
    local korean_name="${VULN_KOREAN_NAMES[$vuln_type]:-$vuln_type}"
    
    show_commit_progress "[$vuln_type] 자동 커밋 모드"
    
    # 모든 변경사항 스테이징
    git add .
    
    # 변경사항 확인
    if git diff --cached --quiet; then
        show_commit_warning "커밋할 변경사항이 없습니다."
        return 0
    fi
    
    # 자동 커밋 메시지 생성
    generate_vulnerability_commit_message "$vuln_type" "$korean_name"
}

# 실제 커밋 실행
execute_commit() {
    local commit_message="$1"
    local commit_type="$2"
    
    show_commit_progress "커밋 실행 중..."
    
    echo ""
    echo -e "${YELLOW}커밋 메시지:${NC}"
    echo "----------------------------------------"
    echo "$commit_message"
    echo "----------------------------------------"
    echo ""
    
    read -p "이 내용으로 커밋하시겠습니까? (y/N): " confirm
    
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        if git commit -m "$commit_message"; then
            show_commit_success "커밋 완료!"
            log_commit "COMMIT_SUCCESS: $commit_type"
            
            # 자동 푸시 옵션
            echo ""
            read -p "원격 저장소에 푸시하시겠습니까? (Y/n): " push_confirm
            
            if [[ "$push_confirm" =~ ^[Nn]$ ]]; then
                show_commit_warning "푸시를 건너뜁니다."
            else
                show_commit_progress "원격 저장소에 푸시 중..."
                if git push; then
                    show_commit_success "푸시 완료!"
                    log_commit "PUSH_SUCCESS: $commit_type"
                else
                    show_commit_error "푸시 실패"
                    log_commit "PUSH_FAILED: $commit_type"
                fi
            fi
        else
            show_commit_error "커밋 실패"
            log_commit "COMMIT_FAILED: $commit_type"
            exit 1
        fi
    else
        show_commit_warning "커밋이 취소되었습니다."
        log_commit "COMMIT_CANCELLED: $commit_type"
    fi
}

# 스크립트 실행
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi