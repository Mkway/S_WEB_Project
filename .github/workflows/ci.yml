name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.1, 8.2, 8.3]
    
    services:
      mysql:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_database
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP ${{ matrix.php-version }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql
        coverage: xdebug

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: /tmp/composer-cache
        key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

    - name: Install dependencies
      run: |
        cd websec-lab/src
        # composer.lockÏù¥ ÏµúÏã†Ïù¥ ÏïÑÎãê Ïàò ÏûàÏúºÎØÄÎ°ú update ÏÇ¨Ïö©
        composer update --no-progress --prefer-dist
        # ÎòêÎäî composer install --prefer-dist --no-progress --no-dev (productionÏö©)

    - name: Setup test environment
      run: |
        cd websec-lab/src
        cp config.php.example config.php || true
        # ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω ÏÑ§Ï†ï
        echo "<?php
        define('DB_HOST', '127.0.0.1');
        define('DB_NAME', 'test_database');
        define('DB_USER', 'test_user');
        define('DB_PASS', 'test_password');
        define('DB_CHARSET', 'utf8mb4');
        define('POSTS_PER_PAGE', 10);
        define('COMMENTS_PER_PAGE', 20);
        define('UPLOAD_DIR', 'uploads/');
        define('MAX_FILE_SIZE', 5242880);
        define('ALLOWED_IMAGE_EXTENSIONS', ['jpg', 'jpeg', 'png', 'gif', 'webp']);
        define('ALLOWED_DOCUMENT_EXTENSIONS', ['pdf', 'doc', 'docx', 'txt']);
        define('MIN_PASSWORD_LENGTH', 8);
        define('SESSION_TIMEOUT', 3600);
        define('CSRF_TOKEN_NAME', 'csrf_token');
        define('MAX_NOTIFICATIONS', 50);
        define('NOTIFICATION_CLEANUP_DAYS', 30);
        define('SITE_NAME', 'Test Site');
        define('SITE_DESCRIPTION', 'Í≤åÏãúÌåê ÏÇ¨Ïù¥Ìä∏');
        define('DEFAULT_TIMEZONE', 'Asia/Seoul');
        define('LOG_DIR', 'logs/');
        define('LOG_MAX_SIZE', 10485760);
        define('LOG_MAX_FILES', 5);
        define('DEBUG_MODE', true);
        define('SHOW_ERRORS', true);
        define('VULNERABILITY_MODE', false);
        date_default_timezone_set(DEFAULT_TIMEZONE);
        if (SHOW_ERRORS) {
            error_reporting(E_ALL);
            ini_set('display_errors', 1);
        } else {
            error_reporting(0);
            ini_set('display_errors', 0);
        }
        if (session_status() === PHP_SESSION_NONE) {
            ini_set('session.cookie_httponly', 1);
            ini_set('session.cookie_secure', 0);
            ini_set('session.use_strict_mode', 1);
            ini_set('session.cookie_samesite', 'Strict');
        }
        ?>" > config.php

    - name: Wait for MySQL
      run: |
        for i in {1..12}; do
          if mysqladmin ping -h 127.0.0.1 -u test_user -ptest_password --silent; then
            echo "MySQL is ready!"
            break
          fi
          echo "Waiting for MySQL... (attempt $i/12)"
          sleep 10
        done
        # ÏµúÏ¢Ö Ïó∞Í≤∞ ÌôïÏù∏
        mysqladmin ping -h 127.0.0.1 -u test_user -ptest_password

    - name: Run PHPUnit tests
      run: |
        cd websec-lab/src
        # ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
        export CI=true
        export GITHUB_ACTIONS=true
        # PHPUnit Ïã§Ìñâ
        if [ -f vendor/bin/phpunit ]; then
          vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml
        else
          echo "PHPUnit not found, updating dependencies first..."
          composer update --prefer-dist --no-progress
          vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./websec-lab/src/coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    needs: tests
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP 8.2
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql

    - name: Install Composer dependencies
      run: |
        cd websec-lab/src
        composer update --prefer-dist --no-progress --no-dev

    - name: Run security audit
      run: |
        cd websec-lab/src
        composer audit || true

    - name: Check for known vulnerabilities
      run: |
        cd websec-lab/src
        # composer require --dev sensiolabs/security-checker
        # vendor/bin/security-checker security:check composer.lock

  code-quality:
    runs-on: ubuntu-latest
    needs: tests

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP 8.2
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: mbstring, xml, ctype, iconv, intl

    - name: Install dependencies
      run: |
        cd websec-lab/src
        composer update --prefer-dist --no-progress

    - name: Run PHP_CodeSniffer
      run: |
        cd websec-lab/src
        # vendor/bin/phpcs --standard=PSR12 --ignore=vendor,test . || true

    - name: Run PHPStan
      run: |
        cd websec-lab/src  
        # vendor/bin/phpstan analyse --level=5 . || true

  docker-build:
    runs-on: ubuntu-latest
    needs: [tests, security-scan, code-quality]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and test Docker images
      run: |
        cd websec-lab
        docker-compose -f docker-compose.yml build
        docker-compose -f docker-compose.yml up -d
        sleep 30
        # Basic health check
        curl -f http://localhost || exit 1
        docker-compose -f docker-compose.yml down

    - name: Run Docker security scan
      run: |
        # docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
        #   -v $(pwd):/src aquasec/trivy image websec-lab_nginx || true

  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy notification
      run: |
        echo "üöÄ Ready for deployment to production"
        echo "All tests passed and Docker images built successfully"